#include "lista.h"

struct lista 
{
	struct registro dadoLis;
	struct lista* ant;
	struct lista* prox;
};

// Cria nova lista vazia (igual a NULL).
Lista* lde_cria()
{
	return NULL;
}

// Insere novo nó depois do nó p.
void lde_insere_depois(Lista *p, Lista *novo)
{
	novo->ant = p;
	if(p->prox == NULL)
	{
		p->prox = novo;
		novo->prox = NULL;
	}
	novo->prox = p->prox;
	p->prox = novo;
}

// Insere novo nó antes do nó p.
void lde_insere_antes(Lista *p, Lista *novo)
{
	novo->prox = p;
	if(p->ant == NULL)
	{
		p->ant = novo;
		novo->ant = NULL;
	}
	novo->ant = p->ant;
	p->ant = novo;
}

// Insere novo nó no início da lista l com valor v.
Lista* lde_insere_ini(Lista *l, struct registro v)
{
	Lista* novo = ((Lista*)malloc(sizeof(Lista)));
	if(novo == NULL){
		printf("Erro: memória insuficiente!");
		exit(1);
	}
	novo->dadoLis = v;
	novo->ant = NULL;
	novo->prox = l;
	if (l != NULL)
		l->ant = novo;
	return novo;
}

// Retira da lista l o 1o nó com valor v. Retorna lista modificada.
Lista* lde_remove(Lista *l, Lista *p)
{
	if(l == NULL || p == NULL)
		return l;
	if (p->prox) 
		p->prox->ant = p->ant;
	if (p->ant) p->ant->prox = p->prox;
	if (l == p) l = l->prox;
	free(p);
	return l;		
}

// Libera a memória alocada para os nós da lista l.
void lde_libera(Lista *l)
{
	while(l != NULL)
		l = lde_remove(l,l);
}

// Imprime valores armazenados na lista l.
void lde_imprime(Lista *l)
{
	Lista* p;
	printf("[ ");
	for(p = l; p != NULL; p = p->prox)
		printf("%d ",p->v);
	printf("]\n");
}

// Retorna 1 se a lista l está vazia, e 0 caso contrário.
int lde_vazia(Lista *l)
{
	if(l == NULL)
		return 1;
	return 0;
}

// Retorna endereço do 1o nó na lista l que contém o valor v.
Lista* lde_busca(Lista *l, struct registro v)
{
	Lista* p;
	for(p = l; p != NULL; p = p->prox)
	{
		if(p->dadoLis == v)
			return p;
	}
	return NULL;
}

// Retorna 1 se l1 e l2 possuem os mesmos valores armazenados (na mesma ordem), 0 caso contrário.
int lde_igual(Lista *l1, Lista *l2)
{
	Lista* p1 = l1;
	Lista* p2 = l2;
	for(;(p1 != NULL || p2 != NULL); p1 = p1->prox, p2 = p2->prox)
	{
		if(p1->v != p2->v)
			return 0;
	}	
	return (p1 == NULL && p2 == NULL);
}
